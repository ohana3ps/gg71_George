generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/garagegrid_lite/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model UserPreference {
  id              String   @id @default(cuid())
  userId          String
  preferenceKey   String
  preferenceValue String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, preferenceKey])
  @@map("user_preferences")
}

model Room {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  deletedBy   String?
  modifiedBy  String?
  boxes       Box[]
  items       Item[]
  racks       Rack[]
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rooms")
}

model Rack {
  id                String     @id @default(cuid())
  name              String
  rackNumber        Int
  maxShelves        Int        @default(5)
  positionsPerShelf Int        @default(6)
  shelfConfig       Json?
  configLocked      Boolean    @default(false)
  roomId            String
  userId            String
  isActive          Boolean    @default(true)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  createdBy         String?
  deletedBy         String?
  modifiedBy        String?
  positions         Position[]
  room              Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roomId, rackNumber])
  @@map("racks")
}

model Position {
  id             String        @id @default(cuid())
  rackId         String
  shelfNumber    Int
  positionNumber Int
  capacity       Int           @default(1)
  isOccupied     Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  boxPositions   BoxPosition[]
  looseItems     Item[]        @relation("ItemPosition")
  rack           Rack          @relation(fields: [rackId], references: [id], onDelete: Cascade)

  @@unique([rackId, shelfNumber, positionNumber])
  @@map("positions")
}

model Box {
  id          String        @id @default(cuid())
  boxNumber   Int
  name        String?
  description String?
  size        String        @default("S")
  type        String        @default("standard")
  roomId      String
  userId      String
  isStaging   Boolean       @default(true)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String?
  deletedBy   String?
  modifiedBy  String?
  positions   BoxPosition[]
  room        Room          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       Item[]

  @@unique([roomId, boxNumber])
  @@map("boxes")
}

model BoxPosition {
  id         String   @id @default(cuid())
  boxId      String
  positionId String
  createdAt  DateTime @default(now())
  box        Box      @relation(fields: [boxId], references: [id], onDelete: Cascade)
  position   Position @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@unique([boxId, positionId])
  @@map("box_positions")
}

model Item {
  id               String            @id @default(cuid())
  name             String
  description      String?
  category         String?
  quantity         Int               @default(1)
  value            Float?
  condition        String?
  location         String?
  notes            String?
  photoUrl         String?
  serialNumber     String?
  purchaseDate     DateTime?
  roomId           String
  boxId            String?
  userId           String
  status           String            @default("AVAILABLE")
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  storageType      String            @default("boxed")
  positionId       String?
  checkedOutBy     String?
  checkedOutAt     DateTime?
  returnedBy       String?
  returnedAt       DateTime?
  originalLocation Json?
  isFood           Boolean           @default(false)
  foodCategory     String?
  expirationDate   DateTime?
  foodUnit         String?
  createdBy        String?
  deletedBy        String?
  modifiedBy       String?
  checkoutLogs     CheckoutLog[]
  expirationAlerts ExpirationAlert[]
  box              Box?              @relation(fields: [boxId], references: [id])
  position         Position?         @relation("ItemPosition", fields: [positionId], references: [id])
  room             Room              @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  receiptItems     ReceiptItem[]

  @@map("items")
}

model CheckoutLog {
  id           String    @id @default(cuid())
  itemId       String
  userId       String
  action       String
  checkedOutAt DateTime?
  returnedAt   DateTime?
  returnedBy   String?
  notes        String?
  createdAt    DateTime  @default(now())
  item         Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@map("checkout_logs")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  name                String?
  isAdmin             Boolean           @default(false)
  role                String            @default("user")
  permissions         Json?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  createdBy           String?
  forcePasswordChange Boolean           @default(false)
  accounts            Account[]
  boxes               Box[]
  expirationAlerts    ExpirationAlert[]
  itemUsages          ItemUsage[]
  items               Item[]
  racks               Rack[]
  receipts            Receipt[]
  recipes             Recipe[]
  rooms               Room[]
  sessions            Session[]
  preferences         UserPreference[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Receipt {
  id               String        @id @default(cuid())
  userId           String
  purchaseDate     DateTime
  storeName        String?
  storeLocation    String?
  totalAmount      Float?
  receiptImageUrls String[]
  rawText          String?
  processingStatus String        @default("pending")
  confidence       Float?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  receiptItems     ReceiptItem[]
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("receipts")
}

model ReceiptItem {
  id                 String   @id @default(cuid())
  receiptId          String
  itemId             String?
  name               String
  quantity           Float    @default(1)
  unit               String?
  price              Float?
  category           String?
  estimatedShelfLife Int?
  confidence         Float?
  isProcessed        Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  item               Item?    @relation(fields: [itemId], references: [id])
  receipt            Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  @@map("receipt_items")
}

model ExpirationAlert {
  id              String    @id @default(cuid())
  userId          String
  itemId          String
  alertType       String
  daysUntilExpiry Int?
  isRead          Boolean   @default(false)
  isSnoozed       Boolean   @default(false)
  snoozeUntil     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  item            Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId, alertType])
  @@map("expiration_alerts")
}

model Recipe {
  id                  String    @id @default(cuid())
  userId              String
  title               String
  description         String?
  prepTime            String?
  cookTime            String?
  totalTime           String?
  servings            Int       @default(4)
  difficulty          String?
  ingredients         Json
  instructions        Json
  nutritionInfo       Json?
  missingIngredients  Json?
  chefTips            Json?
  tags                Json?
  mealType            String?
  proteinBase         String?
  complexity          String?
  timeConstraint      String?
  dietaryRestrictions Json?
  isFavorite          Boolean   @default(false)
  rating              Int?
  notes               String?
  lastCooked          DateTime?
  timesCooked         Int       @default(0)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("recipes")
}

model ItemUsage {
  id               String   @id @default(cuid())
  itemId           String
  itemName         String
  originalQuantity Float
  usedQuantity     Float
  usageType        String
  usedAt           DateTime
  userId           String
  originalItemData String?
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("item_usage")
}
